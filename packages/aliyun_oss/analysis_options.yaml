# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:lints/recommended.yaml

analyzer:
  # For more information see:
  # https://dart.dev/guides/language/analysis-options#enabling-additional-type-checks
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  errors:
    # Without ignore here, we cause import of all_lint_rules to warn, because some rules conflict.
    # We explicitly enabled even conflicting rules and are fixing the conflicts in this file.
    # Put it to warning temporarily, if you need troubleshoot lint rule settings.
    included_file_warning: ignore

    # Treat missing required parameters as an error, not as a hint or a warning.
    missing_required_param: error

    # Treat missing returns as an error, not as a hint or a warning.
    missing_return: error

    # Allow self-reference to deprecated members. This is done because otherwise we have
    # to annotate every member in every test, assert, etc., when we deprecate something.
    deprecated_member_use_from_same_package: ignore

    # DON'T assign new values to parameters of methods or functions.
    # https://dart-lang.github.io/linter/lints/parameter_assignments.html
    parameter_assignments: warning

    # Allow having TODOs in the code.
    todo: ignore

  exclude:
    - "lib/src/http/**"

linter:
  rules:
    always_put_control_body_on_new_line: false
    always_put_required_named_parameters_first: false
    always_use_package_imports: false
    avoid_annotating_with_dynamic: false
    avoid_catches_without_on_clauses: false
    avoid_classes_with_only_static_members: false
    avoid_final_parameters: false
    avoid_positional_boolean_parameters: false
    avoid_redundant_argument_values: false
    avoid_types_on_closure_parameters: false
    cascade_invocations: false
    diagnostic_describe_all_properties: false
    omit_local_variable_types: false
    prefer_constructors_over_static_methods: false
    prefer_double_quotes: false
    prefer_expression_function_bodies: false
    prefer_final_parameters: false
    prefer_int_literals: false
    require_trailing_commas: false
    sort_constructors_first: false
    unnecessary_final: false
